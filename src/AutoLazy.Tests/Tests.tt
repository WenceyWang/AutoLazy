<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
    var initial = new [] { new { } };
	var q = from v1 in initial
			from Static in new [] { true, false }
			from item in new [] { new { Type = typeof(Guid), Expression = "Guid.NewGuid()" }, new { Type = typeof(string), Expression = "Guid.NewGuid().ToString()" } }
			let Type = item.Type
			let Expression = item.Expression
			from Try in new [] { false, true }
			from GenericType in new [] { false, true }
			select new { Static, Type, Expression, Try, GenericType };
	var fixtures = q.ToArray();
#>
using System;
using NUnit.Framework;

namespace AutoLazy.Tests
{
<# foreach (var fixture in fixtures)
   {
       var classPrefix = string.Format(
           "{0}{1}{2}{3}",
           fixture.Static ? "Static" : "Instance",
           fixture.Type.Name,
           fixture.Try ? "WithTry" : "",
           fixture.GenericType ? "GenericType" : "");
       var type = fixture.Type.Name;
       var expression = fixture.Expression;
       var withTry = fixture.Try;
       var keywords = fixture.Static ? "static " : "";
       var genericType = fixture.GenericType;
       var concretePrefix = $"Mock{classPrefix}";
       if (genericType) concretePrefix += $"<{fixture.Type}>";
       var accessorPrefix = fixture.Static ? concretePrefix : "instance";
#>
    public <#=keywords#>class Mock<#=classPrefix#><#=genericType ? "<T>" : ""#>
    {
        public <#=keywords#>int GetCount;
        public <#=keywords#>int PropCount;
        public <#=keywords#>int GetKeyedCount;

        [Lazy]
        public <#=keywords#><#=type#> Get<#=type#>()
        {
<#  if (withTry)
    {
#>
            try {
<#
    }
#>
            ++GetCount;
            return <#=expression#>;
<#  if (withTry)
    {
#>
            } catch (Exception e) {
                throw new Exception("foo", e);
            } finally {
                Console.WriteLine("Finally!");
            }
<#  }#>
        }

        [Lazy]
        public <#=keywords#><#=type#> <#=type#>Prop
        {
            get
            {
<#  if (withTry)
    {
#>
            try {
<#
    }
#>
                ++PropCount;
                return <#=expression#>;
<#  if (withTry)
    {
#>
            } catch (Exception e) {
                throw new Exception("foo", e);
            } finally {
                Console.WriteLine("Finally!");
            }
<#  }#>
            }
        }

        [Lazy]
        public <#=keywords#><#=type#> Get<#=type#>ByKey(<#=type#> key)
        {
<#  if (withTry)
    {
#>
            try {
<#
    }
#>
            ++GetKeyedCount;
            return key;
<#  if (withTry)
    {
#>
            } catch (Exception e) {
                throw new Exception("foo", e);
            } finally {
                Console.WriteLine("Finally!");
            }
<#  }#>
        }
    }

    [TestFixture]
    public class <#=classPrefix#>Tests
    {
        [Test]
        public void Get<#=type#>_should_be_lazy()
        {
<#  if (!fixture.Static) { #>            var <#=accessorPrefix#> = new <#=concretePrefix#>();<#  } #>
            Assert.AreEqual(0, <#=accessorPrefix#>.GetCount);
            var first = <#=accessorPrefix#>.Get<#=type#>();
            Assert.AreEqual(1, <#=accessorPrefix#>.GetCount);
            var second = <#=accessorPrefix#>.Get<#=type#>();
            Assert.AreEqual(1, <#=accessorPrefix#>.GetCount);
            Assert.AreEqual(first, second);
        }

        [Test]
        public void <#=type#>Prop_should_be_lazy()
        {
<#  if (!fixture.Static) { #>            var <#=accessorPrefix#> = new <#=concretePrefix#>();<#  } #>
            Assert.AreEqual(0, <#=accessorPrefix#>.PropCount);
            var first = <#=accessorPrefix#>.<#=type#>Prop;
            Assert.AreEqual(1, <#=accessorPrefix#>.PropCount);
            var second = <#=accessorPrefix#>.<#=type#>Prop;
            Assert.AreEqual(1, <#=accessorPrefix#>.PropCount);
            Assert.AreEqual(first, second);
        }

        [Test]
        public void Get<#=type#>ByKey_should_be_lazy()
        {
<#  if (!fixture.Static) { #>            var <#=accessorPrefix#> = new <#=concretePrefix#>();<#  } #>
            Assert.AreEqual(0, <#=accessorPrefix#>.GetKeyedCount);
            var key1 = <#=expression#>;
            var key2 = <#=expression#>;

            var first = <#=accessorPrefix#>.Get<#=type#>ByKey(key1);
            Assert.AreEqual(1, <#=accessorPrefix#>.GetKeyedCount);
            var second = <#=accessorPrefix#>.Get<#=type#>ByKey(key1);
            Assert.AreEqual(1, <#=accessorPrefix#>.GetKeyedCount);
            Assert.AreEqual(first, second);

            first = <#=accessorPrefix#>.Get<#=type#>ByKey(key2);
            Assert.AreEqual(2, <#=accessorPrefix#>.GetKeyedCount);
            second = <#=accessorPrefix#>.Get<#=type#>ByKey(key2);
            Assert.AreEqual(2, <#=accessorPrefix#>.GetKeyedCount);
            Assert.AreEqual(first, second);
        }
    }

<# } #>
}